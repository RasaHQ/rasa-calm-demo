{
	"info": {
		"_postman_id": "f4b2a7b2-a16f-4d9a-a9b8-a6bb60291b00",
		"name": "OpenAI Chat completions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46185480"
	},
	"item": [
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "start_flow",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\nThese are the flows that can be started, with their description and slots:\\n\\ntransfer_money: send money to friends and family\\n    slot: transfer_money_recipient (the name of a person)\\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\\n\\nlist_contacts: show your contact list\\n\\nadd_card: add a card to your account\\n\\nadd_contact: add a contact to your contact list\\n    slot: add_contact_handle (a user handle starting with @)\\n    slot: add_contact_name (a name of a person)\\n\\nwelcome: say hello to the user\\n\\nwhoami: user wants to know about themselves\\n\\nremove_contact: remove a contact from your contact list\\n    slot: remove_contact_handle (a contact handle starting with @)\\n\\ncheck_balance: check the user's account balance\\n\\ntransaction_search: lists the last transactions of the user account\\n\\nreplace_card: the user needs to replace their card\\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\\n\\nverify_account: Verify an account for higher transfer limits\\n    slot: based_in_california, allowed values: [True, False]\\n\\nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\\n    slot: recurrent_payment_recipient (the name of a person)\\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\\n    slot: recurrent_payment_start_date (the start date of the payment)\\n    slot: recurrent_payment_end_date (the end date of the payment)\\n\\ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\n    slot: user_name (The user name of the user.)\\n    slot: user_password (The password of the user.)\\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\\n\\n\\n===\\nHere is what happened previously in the conversation:\\nUSER: /session_start\\nAI: Hi! I'm your Financial Assistant! How can I help you?\\nUSER: I want to add someone to my contact list.\\n\\n===\\n\\nYou are currently not in any flow and so there are no active slots.\\nThis means you can only set a slot if you first start a flow that requires that slot.\\n\\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\\n\\nThe user just said \\\"\\\"\\\"I want to add someone to my contact list.\\\"\\\"\\\".\\n\\n===\\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\\n* Slot setting, described by \\\"SetSlot(slot_name, slot_value)\\\". An example would be \\\"SetSlot(recipient, Freddy)\\\"\\n* Starting another flow, described by \\\"StartFlow(flow_name)\\\". An example would be \\\"StartFlow(transfer_money)\\\"\\n* Cancelling the current flow, described by \\\"CancelFlow()\\\"\\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \\\"contacts\\\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \\\"SkipQuestion()\\\". Examples of user skip phrases are: \\\"Go to the next question\\\", \\\"Ask me something else\\\".\\n* Responding to knowledge-oriented user messages, described by \\\"SearchAndReply()\\\"\\n* Responding to a casual, non-task-oriented user message, described by \\\"ChitChat()\\\".\\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \\\"HumanHandoff()\\\".\\n\\n\\n===\\nWrite out the actions you want to take, one per line, in the order they should take place.\\nDo not fill slots with abstract values or placeholders.\\nOnly use information provided by the user.\\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\\nStrictly adhere to the provided action types listed above.\\nFocus on the last message and take it one step at a time.\\nUse the previous conversation steps only to aid understanding.\\n\\nYour action list:\"\n            }\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "start_flow",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "start_flow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"messages\": [\n        {\n            \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I want to add someone to my contact list\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"I want to add someone to my contact list\\\"\\\"\\\".\\n\\nYour action list:\",\n            \"role\": \"user\"\n        }\n    ],\n    \"model\": \"gpt-4\",\n    \"max_tokens\": 256,\n    \"temperature\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:47:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "646"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998682"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "79ms"
						},
						{
							"key": "x-request-id",
							"value": "req_bbf4e163cae8cf74d3db1a0d299f005f"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "90361c0e4f123088-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-Aqf6jbWI0SiOb8AZFmgtm7sokuQif\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114437,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"start flow add_contact\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1154,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1160,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "add_contact_handle",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"@barts\\n Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\nThese are the flows that can be started, with their description and slots:\\n\\ntransfer_money: send money to friends and family\\n    slot: transfer_money_recipient (the name of a person)\\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\\n\\nadd_contact: add a contact to your contact list\\n    slot: add_contact_handle (a user handle starting with @)\\n    slot: add_contact_name (a name of a person)\\n\\nwelcome: say hello to the user\\n\\nwhoami: user wants to know about themselves\\n\\nlist_contacts: show your contact list\\n\\ncheck_balance: check the user's account balance\\n\\nadd_card: add a card to your account\\n\\ntransaction_search: lists the last transactions of the user account\\n\\nremove_contact: remove a contact from your contact list\\n    slot: remove_contact_handle (a contact handle starting with @)\\n\\nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\\n    slot: recurrent_payment_recipient (the name of a person)\\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\\n    slot: recurrent_payment_start_date (the start date of the payment)\\n    slot: recurrent_payment_end_date (the end date of the payment)\\n\\nreplace_card: the user needs to replace their card\\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\\n\\nverify_account: Verify an account for higher transfer limits\\n    slot: based_in_california, allowed values: [True, False]\\n\\ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\n    slot: user_name (The user name of the user.)\\n    slot: user_password (The password of the user.)\\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\\n\\n\\n===\\nHere is what happened previously in the conversation:\\nUSER: /session_start\\nAI: Hi! I'm your Financial Assistant! How can I help you?\\nUSER: I want to add someone to my contact list.\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\n\\n===\\n\\nYou are currently in the flow \\\"add_contact\\\".\\nYou have just asked the user for the slot \\\"add_contact_handle\\\" (a user handle starting with @).\\n\\n\\nHere are the slots of the currently active flow:\\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\\n\\n\\n\\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\\n\\nThe user just said \\\"\\\"\\\"@barts\\\"\\\"\\\".\\n\\n===\\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\\n* Slot setting, described by \\\"SetSlot(slot_name, slot_value)\\\". An example would be \\\"SetSlot(recipient, Freddy)\\\"\\n* Starting another flow, described by \\\"StartFlow(flow_name)\\\". An example would be \\\"StartFlow(transfer_money)\\\"\\n* Cancelling the current flow, described by \\\"CancelFlow()\\\"\\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \\\"contacts\\\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \\\"SkipQuestion()\\\". Examples of user skip phrases are: \\\"Go to the next question\\\", \\\"Ask me something else\\\".\\n* Responding to knowledge-oriented user messages, described by \\\"SearchAndReply()\\\"\\n* Responding to a casual, non-task-oriented user message, described by \\\"ChitChat()\\\".\\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \\\"HumanHandoff()\\\".\\n\\n\\n===\\nWrite out the actions you want to take, one per line, in the order they should take place.\\nDo not fill slots with abstract values or placeholders.\\nOnly use information provided by the user.\\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\\nStrictly adhere to the provided action types listed above.\\nFocus on the last message and take it one step at a time.\\nUse the previous conversation steps only to aid understanding.\\n\\nYour action list:\"\n            }\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "add_contact_handle",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "add_contact_handle",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"messages\": [\n        {\n            \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\nUse the following structured data:\\n```json\\n{\\\"active_flow\\\":\\\"add_contact\\\",\\\"current_step\\\":{\\\"requested_slot\\\":\\\"add_contact_handle\\\",\\\"requested_slot_description\\\":\\\"a user handle starting with @\\\"},\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"value\\\":\\\"undefined\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"value\\\":\\\"undefined\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a name of a person\\\"}]}\\n```\\n\\n---\\n\\n## Conversation History\\nUSER: I want to add someone to my contact list\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"@barts\\\"\\\"\\\".\\n\\nYour action list:\",\n            \"role\": \"user\"\n        }\n    ],\n    \"model\": \"gpt-4\",\n    \"max_tokens\": 256,\n    \"temperature\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:49:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "1383"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998605"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_0f7cbc359cf9c8949a38053345fabcd7"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "90361f2448633a9f-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-Aqf8lLy4yJwCqYTwYVCDIaHinsTHi\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114563,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot add_contact_handle @barts\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1237,\n        \"completion_tokens\": 18,\n        \"total_tokens\": 1255,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "add_contact_handle",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"@barts\\n Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\nThese are the flows that can be started, with their description and slots:\\n\\ntransfer_money: send money to friends and family\\n    slot: transfer_money_recipient (the name of a person)\\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\\n\\nadd_contact: add a contact to your contact list\\n    slot: add_contact_handle (a user handle starting with @)\\n    slot: add_contact_name (a name of a person)\\n\\nwelcome: say hello to the user\\n\\nwhoami: user wants to know about themselves\\n\\nlist_contacts: show your contact list\\n\\ncheck_balance: check the user's account balance\\n\\nadd_card: add a card to your account\\n\\ntransaction_search: lists the last transactions of the user account\\n\\nremove_contact: remove a contact from your contact list\\n    slot: remove_contact_handle (a contact handle starting with @)\\n\\nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\\n    slot: recurrent_payment_recipient (the name of a person)\\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\\n    slot: recurrent_payment_start_date (the start date of the payment)\\n    slot: recurrent_payment_end_date (the end date of the payment)\\n\\nreplace_card: the user needs to replace their card\\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\\n\\nverify_account: Verify an account for higher transfer limits\\n    slot: based_in_california, allowed values: [True, False]\\n\\ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\n    slot: user_name (The user name of the user.)\\n    slot: user_password (The password of the user.)\\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\\n\\n\\n===\\nHere is what happened previously in the conversation:\\nUSER: /session_start\\nAI: Hi! I'm your Financial Assistant! How can I help you?\\nUSER: I want to add someone to my contact list.\\nAI: What's the handle of the user you want to add?\\nUSER: @barts.\\nAI: What's the name of the user you want to add?\\nUSER: Bart\\n\\n===\\n\\nYou are currently in the flow \\\"add_contact\\\".\\nYou have just asked the user for the slot \\\"add_contact_handle\\\" (a user handle starting with @).\\n\\n\\nHere are the slots of the currently active flow:\\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\\n\\n\\n\\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\\n\\nThe user just said \\\"\\\"\\\"Bart\\\"\\\"\\\".\\n\\n===\\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\\n* Slot setting, described by \\\"SetSlot(slot_name, slot_value)\\\". An example would be \\\"SetSlot(recipient, Freddy)\\\"\\n* Starting another flow, described by \\\"StartFlow(flow_name)\\\". An example would be \\\"StartFlow(transfer_money)\\\"\\n* Cancelling the current flow, described by \\\"CancelFlow()\\\"\\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \\\"contacts\\\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \\\"SkipQuestion()\\\". Examples of user skip phrases are: \\\"Go to the next question\\\", \\\"Ask me something else\\\".\\n* Responding to knowledge-oriented user messages, described by \\\"SearchAndReply()\\\"\\n* Responding to a casual, non-task-oriented user message, described by \\\"ChitChat()\\\".\\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \\\"HumanHandoff()\\\".\\n\\n\\n===\\nWrite out the actions you want to take, one per line, in the order they should take place.\\nDo not fill slots with abstract values or placeholders.\\nOnly use information provided by the user.\\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\\nStrictly adhere to the provided action types listed above.\\nFocus on the last message and take it one step at a time.\\nUse the previous conversation steps only to aid understanding.\\n\\nYour action list:\"\n            }\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "add_contact_name",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "add_contact_handle",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\nUse the following structured data:\\n```json\\n{\\\"active_flow\\\":\\\"add_contact\\\",\\\"current_step\\\":{\\\"requested_slot\\\":\\\"add_contact_name\\\",\\\"requested_slot_description\\\":\\\"a name of a person\\\"},\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"value\\\":\\\"@barts\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"value\\\":\\\"undefined\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a name of a person\\\"}]}\\n```\\n\\n---\\n\\n## Conversation History\\nUSER: I want to add someone to my contact list\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\nAI: What's the name of the user you want to add?\\nUSER: Bart\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"Bart\\\"\\\"\\\".\\n\\nYour action list:\"\n            }\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:49:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "1383"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998605"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_0f7cbc359cf9c8949a38053345fabcd7"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "90361f2448633a9f-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-Aqf8lLy4yJwCqYTwYVCDIaHinsTHi\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114563,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot add_contact_name Bart\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1237,\n        \"completion_tokens\": 18,\n        \"total_tokens\": 1255,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "end_flow",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"Yes\\n Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\nThese are the flows that can be started, with their description and slots:\\n\\ntransfer_money: send money to friends and family\\n    slot: transfer_money_recipient (the name of a person)\\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\\n\\nadd_contact: add a contact to your contact list\\n    slot: add_contact_handle (a user handle starting with @)\\n    slot: add_contact_name (a name of a person)\\n    slot: add_contact_confirmation, allowed values: [True, False]\\n\\nwelcome: say hello to the user\\n\\nlist_contacts: show your contact list\\n\\nwhoami: user wants to know about themselves\\n\\nadd_card: add a card to your account\\n\\ncheck_balance: check the user's account balance\\n\\ntransaction_search: lists the last transactions of the user account\\n\\nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\\n    slot: recurrent_payment_recipient (the name of a person)\\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\\n    slot: recurrent_payment_start_date (the start date of the payment)\\n    slot: recurrent_payment_end_date (the end date of the payment)\\n\\nremove_contact: remove a contact from your contact list\\n    slot: remove_contact_handle (a contact handle starting with @)\\n\\nreplace_card: the user needs to replace their card\\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\\n\\nverify_account: Verify an account for higher transfer limits\\n    slot: based_in_california, allowed values: [True, False]\\n\\ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\n    slot: user_name (The user name of the user.)\\n    slot: user_password (The password of the user.)\\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\\n\\n\\n===\\nHere is what happened previously in the conversation:\\nUSER: /session_start\\nAI: Hi! I'm your Financial Assistant! How can I help you?\\nUSER: I want to add someone to my contact list\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\nAI: Do you want to add @barts to your contacts?\\nUSER: Yes\\n\\n===\\n\\nYou are currently in the flow \\\"add_contact\\\".\\nYou have just asked the user for the slot \\\"add_contact_confirmation\\\".\\n\\n\\nHere are the slots of the currently active flow:\\n- name: add_contact_handle, value: @barts, type: text, description: a user handle starting with @\\n- name: add_contact_name, value: Bart, type: text, description: a name of a person\\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\\n\\n\\n\\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\\n\\nThe user just said \\\"\\\"\\\"Yes\\\"\\\"\\\".\\n\\n===\\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\\n* Slot setting, described by \\\"SetSlot(slot_name, slot_value)\\\". An example would be \\\"SetSlot(recipient, Freddy)\\\"\\n* Starting another flow, described by \\\"StartFlow(flow_name)\\\". An example would be \\\"StartFlow(transfer_money)\\\"\\n* Cancelling the current flow, described by \\\"CancelFlow()\\\"\\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \\\"contacts\\\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \\\"SkipQuestion()\\\". Examples of user skip phrases are: \\\"Go to the next question\\\", \\\"Ask me something else\\\".\\n* Responding to knowledge-oriented user messages, described by \\\"SearchAndReply()\\\"\\n* Responding to a casual, non-task-oriented user message, described by \\\"ChitChat()\\\".\\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \\\"HumanHandoff()\\\".\\n\\n\\n===\\nWrite out the actions you want to take, one per line, in the order they should take place.\\nDo not fill slots with abstract values or placeholders.\\nOnly use information provided by the user.\\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\\nStrictly adhere to the provided action types listed above.\\nFocus on the last message and take it one step at a time.\\nUse the previous conversation steps only to aid understanding.\\n\\nYour action list:\"\n            }\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "end_flow",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "end_flow",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"messages\": [\n        {\n            \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"},{\\\"name\\\":\\\"add_contact_confirmation\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\nUse the following structured data:\\n```json\\n{\\\"active_flow\\\":\\\"add_contact\\\",\\\"current_step\\\":{\\\"requested_slot\\\":\\\"add_contact_confirmation\\\",\\\"requested_slot_description\\\":null},\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"value\\\":\\\"@barts\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"value\\\":\\\"Bart\\\",\\\"type\\\":\\\"text\\\",\\\"description\\\":\\\"a name of a person\\\"},{\\\"name\\\":\\\"add_contact_confirmation\\\",\\\"value\\\":\\\"undefined\\\",\\\"type\\\":\\\"bool\\\",\\\"allowed_values\\\":\\\"[True, False]\\\"}]}\\n```\\n\\n---\\n\\n## Conversation History\\nUSER: I want to add someone to my contact list\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\nAI: What's the name of the user you want to add?\\nUSER: Bart\\nAI: Do you want to add Bart(@barts) to your contacts?\\nUSER: yes\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"yes\\\"\\\"\\\".\\n\\nYour action list:\",\n            \"role\": \"user\"\n        }\n    ],\n    \"model\": \"gpt-4\",\n    \"max_tokens\": 256,\n    \"temperature\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:53:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "576"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998564"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "86ms"
						},
						{
							"key": "x-request-id",
							"value": "req_28f4c754eb29a36a9beea6ab7d30a176"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903624866c003b9d-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfCJJleN0vLsCTbQVXKKOlrweg40\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114783,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot add_contact_confirmation True\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1277,\n        \"completion_tokens\": 9,\n        \"total_tokens\": 1286,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"show my contact list\\n Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\nThese are the flows that can be started, with their description and slots:\\n\\ntransfer_money: send money to friends and family\\n    slot: transfer_money_recipient (the name of a person)\\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\\n\\nadd_contact: add a contact to your contact list\\n    slot: add_contact_handle (a user handle starting with @)\\n    slot: add_contact_name (a name of a person)\\n    slot: add_contact_confirmation, allowed values: [True, False]\\n\\nlist_contacts: show your contact list\\n\\nwelcome: say hello to the user\\n\\ncheck_balance: check the user's account balance\\n\\ntransaction_search: lists the last transactions of the user account\\n\\nadd_card: add a card to your account\\n\\nwhoami: user wants to know about themselves\\n\\nremove_contact: remove a contact from your contact list\\n    slot: remove_contact_handle (a contact handle starting with @)\\n\\ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\n    slot: user_name (The user name of the user.)\\n    slot: user_password (The password of the user.)\\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\\n\\nverify_account: Verify an account for higher transfer limits\\n    slot: based_in_california, allowed values: [True, False]\\n\\nreplace_card: the user needs to replace their card\\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\\n\\nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\\n    slot: recurrent_payment_recipient (the name of a person)\\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\\n    slot: recurrent_payment_start_date (the start date of the payment)\\n    slot: recurrent_payment_end_date (the end date of the payment)\\n\\n\\n===\\nHere is what happened previously in the conversation:\\nUSER: /session_start\\nAI: Hi! I'm your Financial Assistant! How can I help you?\\nUSER: I want to add someone to my contact list\\nAI: What's the handle of the user you want to add?\\nUSER: @barts\\nAI: Do you want to add @barts to your contacts?\\nUSER: yes\\nAI: Contact added successfully.\\nAI: What else can I help you with?\\nUSER: show my contact list\\n\\n===\\n\\nYou are currently not in any flow and so there are no active slots.\\nThis means you can only set a slot if you first start a flow that requires that slot.\\n\\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\\n\\nThe user just said \\\"\\\"\\\"show my contact list\\\"\\\"\\\".\\n\\n===\\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\\n* Slot setting, described by \\\"SetSlot(slot_name, slot_value)\\\". An example would be \\\"SetSlot(recipient, Freddy)\\\"\\n* Starting another flow, described by \\\"StartFlow(flow_name)\\\". An example would be \\\"StartFlow(transfer_money)\\\"\\n* Cancelling the current flow, described by \\\"CancelFlow()\\\"\\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \\\"contacts\\\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \\\"SkipQuestion()\\\". Examples of user skip phrases are: \\\"Go to the next question\\\", \\\"Ask me something else\\\".\\n* Responding to knowledge-oriented user messages, described by \\\"SearchAndReply()\\\"\\n* Responding to a casual, non-task-oriented user message, described by \\\"ChitChat()\\\".\\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \\\"HumanHandoff()\\\".\\n\\n\\n===\\nWrite out the actions you want to take, one per line, in the order they should take place.\\nDo not fill slots with abstract values or placeholders.\\nOnly use information provided by the user.\\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\\nStrictly adhere to the provided action types listed above.\\nFocus on the last message and take it one step at a time.\\nUse the previous conversation steps only to aid understanding.\\n\\nYour action list:\"\n            }\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "show_contact_list",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\n\\nUSER: show my contact list\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"show my contact list\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"start flow list_contacts\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\n\\nUSER: I would like to order a diavola pizza.\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"I would like to order a diavola pizza.\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "add_pizza_type",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\n\\nUSER: I would like to order a diavola pizza.\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"I would like to order a diavola pizza.\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot pizza diavola\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"2 please\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "start_pizza_order (2 pizzas)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"2 please\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot num_pizza 2, start flow order_pizza\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 1 please\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"1 please\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "start_pizza_order (1 pizza)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 1 please\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"1 please\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot num_pizza 1, start flow order_pizza\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"30 Pine Road\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "set_pizza_delivery_address (30 Pine Road)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"30 Pine Road\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot address '30 Pine Road'\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 40 Elm Street\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"40 Elm Street\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "set_pizza_delivery_address (40 Elm Street)",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 40 Elm Street\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"40 Elm Street\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot address '40 Elm Street'\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"Yes\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "confirm_order",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"Yes\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot confirmation_order True\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\nAI: How would you like to pay for your order?\\nUSER: credit card\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"credit card\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "set_payment_option",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\nAI: How would you like to pay for your order?\\nUSER: credit card\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"credit card\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot payment_option card\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		},
		{
			"name": "https://api.openai.com/v1/chat/completions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{vault:openai-api:token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{vault:OpenAIKey}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-mock-response-name",
						"value": "show_contact_list",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\nAI: How would you like to pay for your order?\\nUSER: credit card\\nAI: Please provide your card number.\\nUSER: 1234 5678 9012 3456\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"1234 5678 9012 3456\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/v1/chat/completions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"chat",
						"completions"
					]
				}
			},
			"response": [
				{
					"name": "complete_pizza_order",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{vault:OpenAIKey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "show_contact_list",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"## Task Description\\nYour task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\\n\\n---\\n\\n## Available Flows and Slots\\nUse the following structured data:\\n```json\\n{\\\"flows\\\":[{\\\"name\\\":\\\"transfer_money\\\",\\\"description\\\":\\\"send money to friends and family\\\",\\\"slots\\\":[{\\\"name\\\":\\\"transfer_money_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"transfer_money_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"}]},{\\\"name\\\":\\\"list_contacts\\\",\\\"description\\\":\\\"show your contact list\\\"},{\\\"name\\\":\\\"add_contact\\\",\\\"description\\\":\\\"add a contact to your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"add_contact_handle\\\",\\\"description\\\":\\\"a user handle starting with @\\\"},{\\\"name\\\":\\\"add_contact_name\\\",\\\"description\\\":\\\"a name of a person\\\"}]},{\\\"name\\\":\\\"remove_contact\\\",\\\"description\\\":\\\"remove a contact from your contact list\\\",\\\"slots\\\":[{\\\"name\\\":\\\"remove_contact_handle\\\",\\\"description\\\":\\\"a contact handle starting with @\\\"}]},{\\\"name\\\":\\\"transaction_search\\\",\\\"description\\\":\\\"lists the last transactions of the user account\\\"},{\\\"name\\\":\\\"check_balance\\\",\\\"description\\\":\\\"check the user's account balance\\\"},{\\\"name\\\":\\\"add_card\\\",\\\"description\\\":\\\"add a card to your account\\\"},{\\\"name\\\":\\\"job_vacancies\\\",\\\"description\\\":\\\"user asks for job vacancies\\\",\\\"slots\\\":[{\\\"name\\\":\\\"department\\\"}]},{\\\"name\\\":\\\"fill_pizza_order\\\",\\\"description\\\":\\\"user is asked to fill out pizza order details\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"}]},{\\\"name\\\":\\\"find_available_appointments\\\",\\\"description\\\":\\\"find available appointments on the doctor's schedule\\\",\\\"slots\\\":[{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"verify_account\\\",\\\"description\\\":\\\"Verify an account for higher transfer limits\\\",\\\"slots\\\":[{\\\"name\\\":\\\"based_in_california\\\",\\\"allowed_values\\\":[True, False]}]},{\\\"name\\\":\\\"order_pizza\\\",\\\"description\\\":\\\"user asks for a pizza\\\",\\\"slots\\\":[{\\\"name\\\":\\\"pizza\\\"},{\\\"name\\\":\\\"num_pizza\\\"},{\\\"name\\\":\\\"address\\\"},{\\\"name\\\":\\\"payment_option\\\",\\\"allowed_values\\\":['card', 'membership_points']},{\\\"name\\\":\\\"card_details\\\"},{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"}]},{\\\"name\\\":\\\"order_gift\\\",\\\"description\\\":\\\"order a gift for someone\\\",\\\"slots\\\":[{\\\"name\\\":\\\"gift_name\\\",\\\"description\\\":\\\"the name of the gift\\\"},{\\\"name\\\":\\\"gift_price\\\",\\\"description\\\":\\\"the price of the gift\\\"},{\\\"name\\\":\\\"gift_recipient\\\",\\\"description\\\":\\\"the name of the person receiving the gift\\\"}]},{\\\"name\\\":\\\"book_doctor_appointment\\\",\\\"description\\\":\\\"book an appointment at doctor's office\\\",\\\"slots\\\":[{\\\"name\\\":\\\"doctor_name\\\",\\\"description\\\":\\\"a name of the doctor\\\"},{\\\"name\\\":\\\"doctor_office_name\\\",\\\"description\\\":\\\"the doctor's office name\\\"},{\\\"name\\\":\\\"appointment_reason\\\",\\\"description\\\":\\\"a medical reason for the appointment\\\"},{\\\"name\\\":\\\"appointment_time\\\",\\\"description\\\":\\\"the time of the appointment\\\"}]},{\\\"name\\\":\\\"replace_card\\\",\\\"description\\\":\\\"the user needs to replace their card\\\",\\\"slots\\\":[{\\\"name\\\":\\\"replacement_reason\\\",\\\"allowed_values\\\":['lost', 'damaged']}]},{\\\"name\\\":\\\"check_portfolio\\\",\\\"description\\\":\\\"Check the user's investment portfolio, including stocks, bonds, and mutual funds.\\\",\\\"slots\\\":[{\\\"name\\\":\\\"user_name\\\",\\\"description\\\":\\\"The user name of the user.\\\"},{\\\"name\\\":\\\"user_password\\\",\\\"description\\\":\\\"The password of the user.\\\"},{\\\"name\\\":\\\"portfolio_type\\\",\\\"description\\\":\\\"The type of portfolio, for example: stocks, bonds or mutual_funds.\\\",\\\"allowed_values\\\":['stocks', 'bonds', 'mutual_funds']}]},{\\\"name\\\":\\\"setup_recurrent_payment\\\",\\\"description\\\":\\\"set up a recurring payment, which can either be a direct debit or a standing order\\\",\\\"slots\\\":[{\\\"name\\\":\\\"recurrent_payment_type\\\",\\\"description\\\":\\\"the type of payment\\\",\\\"allowed_values\\\":['direct debit', 'standing order']},{\\\"name\\\":\\\"recurrent_payment_recipient\\\",\\\"description\\\":\\\"the name of a person\\\"},{\\\"name\\\":\\\"recurrent_payment_amount_of_money\\\",\\\"description\\\":\\\"the amount of money without any currency designation\\\"},{\\\"name\\\":\\\"recurrent_payment_frequency\\\",\\\"description\\\":\\\"the frequency of the payment\\\",\\\"allowed_values\\\":['monthly', 'yearly']}]}]}\\n```\\n\\n---\\n\\n## Available Actions:\\n* `start flow flow_name`: Starting a flow. For example, `start flow transfer_money` or `start flow list_contacts`.\\n* `set slot slot_name slot_value`: Slot setting. For example, `set slot transfer_money_recipient Freddy`. Can be used to correct and change previously set values.\\n* `cancel flow`: Cancelling the current flow.\\n* `disambiguate flows flow_name1 flow_name2 ... flow_name_n`: Disambiguate which flow should be started when user input is ambiguous by listing the potential flows as options. For example, `disambiguate flows list_contacts add_contact remove_contact ...` if the user just wrote \\\"contacts\\\".\\n* `provide info`: Responding to the user's questions by supplying relevant information, such as answering FAQs or explaining services.\\n* `offtopic reply`: Responding to casual or social user messages that are unrelated to any flows, engaging in friendly conversation and addressing off-topic remarks.\\n* `hand over`: Handing over to a human, in case the user seems frustrated or explicitly asks to speak to one.\\n* `repeat message`: Repeating the last bot message.\\n\\n---\\n\\n## General Tips\\n* Do not fill slots with abstract values or placeholders.\\n* For categorical slots try to match the user message with allowed slot values. Use \\\"other\\\" if you cannot match it.\\n* Set the boolean slots based on the user response. Map positive responses to `True`, and negative to `False`.\\n* Extract text slot values exactly as provided by the user. Avoid assumptions, format changes, or partial extractions.\\n* Only use information provided by the user.\\n* Use clarification in ambiguous cases.\\n* Multiple flows can be started. If a user wants to digress into a second flow, you do not need to cancel the current flow.\\n* Do not cancel the flow unless the user explicitly requests it.\\n* Strictly adhere to the provided action format.\\n* Focus on the last message and take it one step at a time.\\n* Use the previous conversation steps only to aid understanding.\\n\\n---\\n\\n## Current State\\n\\nYou are currently not inside any flow.\\n\\n---\\n\\n## Conversation History\\nUSER: I would like to order a diavola pizza.\\nAI: How many pizzas would you like to order?\\nUSER: 2 please\\nAI: What is the delivery address?\\nUSER: 30 Pine Road\\nAI: You have put in a order for 2 pizzas. Please confirm the details above are correct?\\nUSER: Yes\\nAI: How would you like to pay for your order?\\nUSER: credit card\\nAI: Please provide your card number.\\nUSER: 1234 5678 9012 3456\\n\\n---\\n\\n## Task\\nCreate an action list with one action per line in response to the user's last message: \\\"\\\"\\\"1234 5678 9012 3456\\\"\\\"\\\".\\n\\nYour action list:\"}\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/chat/completions",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 17 Jan 2025 11:55:56 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "access-control-expose-headers",
							"value": "X-Request-ID"
						},
						{
							"key": "openai-organization",
							"value": "rasa"
						},
						{
							"key": "openai-processing-ms",
							"value": "978"
						},
						{
							"key": "openai-version",
							"value": "2020-10-01"
						},
						{
							"key": "x-ratelimit-limit-requests",
							"value": "10000"
						},
						{
							"key": "x-ratelimit-limit-tokens",
							"value": "1000000"
						},
						{
							"key": "x-ratelimit-remaining-requests",
							"value": "9999"
						},
						{
							"key": "x-ratelimit-remaining-tokens",
							"value": "998613"
						},
						{
							"key": "x-ratelimit-reset-requests",
							"value": "6ms"
						},
						{
							"key": "x-ratelimit-reset-tokens",
							"value": "83ms"
						},
						{
							"key": "x-request-id",
							"value": "req_4b5139cd8ee9025b5505ca428beae3d0"
						},
						{
							"key": "strict-transport-security",
							"value": "max-age=31536000; includeSubDomains; preload"
						},
						{
							"key": "CF-Cache-Status",
							"value": "DYNAMIC"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "Server",
							"value": "cloudflare"
						},
						{
							"key": "CF-RAY",
							"value": "903628b83c923af2-BOM"
						},
						{
							"key": "Content-Encoding",
							"value": "br"
						},
						{
							"key": "alt-svc",
							"value": "h3=\":443\"; ma=86400"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"chatcmpl-AqfF51bD27Br1ZrtfO4XKQvAXmznI\",\n    \"object\": \"chat.completion\",\n    \"created\": 1737114955,\n    \"model\": \"gpt-4-0613\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"set slot card_details '1234 5678 9012 3456'\",\n                \"refusal\": null\n            },\n            \"logprobs\": null,\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"usage\": {\n        \"prompt_tokens\": 1229,\n        \"completion_tokens\": 6,\n        \"total_tokens\": 1235,\n        \"prompt_tokens_details\": {\n            \"cached_tokens\": 0,\n            \"audio_tokens\": 0\n        },\n        \"completion_tokens_details\": {\n            \"reasoning_tokens\": 0,\n            \"audio_tokens\": 0,\n            \"accepted_prediction_tokens\": 0,\n            \"rejected_prediction_tokens\": 0\n        }\n    },\n    \"service_tier\": \"default\",\n    \"system_fingerprint\": null\n}"
				}
			]
		}
	]
}
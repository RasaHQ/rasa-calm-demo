name: Continous Integration and Deployment

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON_VERSION: '3.9'
  POETRY_VERSION: 1.8.2

jobs:
  train-model:
    name: Train model
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout git repository üïù
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Setup Python
        uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Install poetry ü¶Ñ
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Create virtual environment
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        run: poetry config virtualenvs.in-project true

      - name: Install pip dependencies from requirements file
        run: |
          source .venv/bin/activate
          python -m pip install -r qdrant-requirements.txt

      # Authenticate with gcloud for release registry (where Rasa is published)
      - id: "auth-release"
        name: Authenticate with gcloud for release registry üé´
        uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d"
        with:
          token_format: 'access_token'
          credentials_json: "${{ secrets.RASA_RELEASES_READ }}"

      - name: Configure OAuth token for poetry
        run: |
          poetry config http-basic.rasa-plus oauth2accesstoken $(gcloud auth print-access-token)

      - name: Install Dependencies üì¶
        run: |
          make install

      - name: Train model
        env:
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
          RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
          RASA_PRO_BETA_INTENTLESS: true
          RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
          RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        run: |
          make train

      - name: Upload model to Rasa X
        id: upload_model
        run: |
          cd models
          files=(*)
          curl -k -F "model=@$files" "${{secrets.RASA_X_DEPLOYMENT}}/api/projects/default/models?api_token=${{secrets.RASA_X_TOKEN}}"
          echo "model=${files%%.*}" >> "$GITHUB_OUTPUT"

      - name: Tag model as production in Rasa X
        if: github.ref == 'refs/heads/main'
        run: |
          curl --request PUT \
          --url "${{secrets.RASA_X_DEPLOYMENT}}/api/projects/default/models/${{steps.upload_model.outputs.model}}/tags/production?api_token=${{secrets.RASA_X_TOKEN}}" \
          --header 'content-type: application/json'

      - name: Persist model
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
        with:
          name: trained-model
          path: models/${{steps.upload_model.outputs.model}}.tar.gz

  run_e2e_tests:
    name: Run e2e tests
    runs-on: ubuntu-24.04
    needs: [train-model]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

    - name: Setup Python
      uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      id: cache-poetry
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Create virtual environment
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      run: poetry config virtualenvs.in-project true

      # Authenticate with gcloud for release registry (where Rasa is published)
    - id: "auth-release"
      name: Authenticate with gcloud for release registry üé´
      uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d"
      with:
        token_format: 'access_token'
        credentials_json: "${{ secrets.RASA_RELEASES_READ }}"

    - name: Configure OAuth token for poetry
      run: |
        poetry config http-basic.rasa-plus oauth2accesstoken $(gcloud auth print-access-token)

    - name: Install Dependencies üì¶
      run: |
        make install

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
      with:
        name: trained-model
        path: models/

    - name: Init LLM Cache
      id: cache-llm
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .rasa
        key: rasa-llm-cache

    - name: Run action server
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_INTENTLESS: true
      run: |
        make actions &

    - name: Run duckling server
      run: |
        make run-duckling

    - name: Make test results directory
      run: |
        mkdir tests

    - name: Run e2e passing tests
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_INTENTLESS: true
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-passing 

    - name: Save test-passing results
      if: failure()
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
      with:
        name: test-passing-results
        path: tests/

    - name: Run e2e flaky tests
      if: always()
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_INTENTLESS: true
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-flaky || true

    - name: Run e2e failing tests
      id: run-e2e-failing-tests 
      if: always()
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_INTENTLESS: true
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-failing | grep '0 passed'

    - name: Save test-failing results
      if: failure() && steps.run-e2e-failing-tests.outcome == 'failure'
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
      with:
        name: test-failing-results
        path: tests/*passed.yml

    - name: Stop Duckling server
      run: |
          make stop-duckling

  run_e2e_tests_with_assertions:
    name: Run e2e tests with assertions
    runs-on: ubuntu-24.04
    needs: [train-model]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

    - name: Setup Python
      uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      id: cache-poetry
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Create virtual environment
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      run: poetry config virtualenvs.in-project true

      # Authenticate with gcloud for release registry (where Rasa is published)
    - id: "auth-release"
      name: Authenticate with gcloud for release registry üé´
      uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d"
      with:
        token_format: 'access_token'
        credentials_json: "${{ secrets.RASA_RELEASES_READ }}"

    - name: Configure OAuth token for poetry
      run: |
        poetry config http-basic.rasa-plus oauth2accesstoken $(gcloud auth print-access-token)

    - name: Install Dependencies üì¶
      run: |
        make install

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
      with:
        name: trained-model
        path: models/

    - name: Init LLM Cache
      id: cache-llm
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .rasa
        key: rasa-llm-cache

    - name: Run action server
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_INTENTLESS: true
      run: |
        make actions &

    - name: Run duckling server
      run: |
        make run-duckling

    - name: Make test results directory
      run: |
        mkdir tests

    - name: Run e2e passing tests with assertions
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-passing-assertions 

    - name: Save test-passing-assertions results
      if: failure()
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
      with:
        name: test-passing-assertions-results
        path: tests/

    - name: Run e2e flaky tests with assertions
      if: always()
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-flaky-assertions || true

    - name: Run e2e failing tests with assertions
      id: run-e2e-failing-tests-with-assertions
      if: always()
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
      run: |
        make test-failing-assertions | grep '0 passed'

    - name: Save test-failing-assertions results
      if: failure() && steps.run-e2e-failing-tests-with-assertions.outcome == 'failure'
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
      with:
        name: test-failing-assertions-results
        path: tests/*passed.yml

    - name: Stop Duckling server
      run: |
          make stop-duckling

  run_e2e_tests_with_stub_custom_actions:
    name: Run e2e tests with stub custom actions
    runs-on: ubuntu-24.04
    needs: [train-model]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

    - name: Setup Python
      uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      id: cache-poetry
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Create virtual environment
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      run: poetry config virtualenvs.in-project true

      # Authenticate with gcloud for release registry (where Rasa is published)
    - id: "auth-release"
      name: Authenticate with gcloud for release registry üé´
      uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d"
      with:
        token_format: 'access_token'
        credentials_json: "${{ secrets.RASA_RELEASES_READ }}"

    - name: Configure OAuth token for poetry
      run: |
        poetry config http-basic.rasa-plus oauth2accesstoken $(gcloud auth print-access-token)

    - name: Install Dependencies üì¶
      run: |
        make install

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
      with:
        name: trained-model
        path: models/

    - name: Init LLM Cache
      id: cache-llm
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: .rasa
        key: rasa-llm-cache

    - name: Run duckling server
      run: |
        make run-duckling

    - name: Make test results directory
      run: |
        mkdir tests

    - name: Run e2e passing tests with stub custom actions
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        RASA_PRO_LICENSE: ${{secrets.RASA_PRO_LICENSE}}
        RASA_DUCKLING_HTTP_URL: ${{secrets.DUCKLING_URL}}
        RASA_PRO_BETA_PREDICATES_IN_RESPONSE_CONDITIONS: true
        RASA_PRO_BETA_STUB_CUSTOM_ACTION: true
      run: |
        make test-passing-stub-custom-actions 

    - name: Save test-stub-custom-actions-passing results
      if: failure()
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 #v4.4.3
      with:
        name: test-stub-custom-actions-passing-results
        path: tests/

    - name: Stop Duckling server
      run: |
        make stop-duckling

